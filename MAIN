#include <iostream>
#include <string>
#include <fstream>


//Queue BEGIN
template <class T>
class Queue {
public:
    int size{};
    T* arr;
    Queue();
    void enqueue(T item);
    T pop();
    void print_queue();
    T peek();
    bool isEmpty();
    T push_stack();
    T pop_stack();
    T peek_stack();
};

template<class T>
Queue<T>::Queue() {
    this->arr = NULL;
    this->size = 0;
}



template<class T>
void Queue<T>::enqueue(T item) {

    if (size == 0) {
        size++;
        arr = new T[1];
        arr[0] = item;
    }
    else {
        size++;
        T* tmp = new T[size];

        for (int i = 0; i < (size - 1); i++) {
            tmp[i] = arr[i];
        }

        delete[] arr;
        tmp[size - 1] = item;
        arr = tmp;
        tmp = NULL;
    }
}

template<class T>
T Queue<T>::pop() {

    if (size == 0) {
        return T();
    }
    else if (size == 1) {
        size--;
        T tmp = arr[0];
        delete[] arr;
        arr = NULL;
        return tmp;
    }
    else {
        size--;
        T tmp_item = arr[0];
        T* tmp_arr = new T[size];

        for (int i = 1; i < (size + 1); i++) {
            tmp_arr[i - 1] = arr[i];
        }

        delete[] arr;
        arr = tmp_arr;
        tmp_arr = NULL;
        return tmp_item;

    }


}

template<class T>
void Queue<T>::print_queue() {
    if (size == 0) {
        std::cout << "Queue is empty" << std::endl;
    }
    else {
        for (int i = 0; i < size; i++) {
            if (i != (size - 1))
                std::cout << arr[i] << ",";
            else
                std::cout << arr[i];
        }
        std::cout << std::endl;
    }
}

template<class T>
T Queue<T>::peek() {
    if (size == 0) {
        return T();
    }
    else {
        return arr[0];
    }
}
template<class T>
T Queue<T> ::peek_stack() {
    if (size == 0) {
        return T();
    }
    else {

        return arr[size - 1];
    }
}

template<class T>
T Queue<T> ::pop_stack() {
    if (size == 0) {

        return T();
    }
    else {
        size = size - 1;
        T tmp_item = arr[size];
        if (size == 0) {

            delete[] arr;
            arr = nullptr;
        }
        else {

            T* tmp_array = new T[size];
            for (int i = 0; i < size; i++) {
                tmp_array[i] = arr[i];
            }
            delete[] arr;
            arr = tmp_array;
        }
        return tmp_item;
    }
}

template<class T>
bool Queue<T>::isEmpty() {
    return size == 0;
}
//Queue END


//Lets start READING




//___________________________________________________
//____________________________________________________
//NAND AND NOT Library
//NODE
struct node {
    int cost{};
    bool isInput{};
    bool isNAND{};
    bool isNOT{};
    bool output{};
    struct node* parent{};
    struct node* left{};
    struct node* right{};
    virtual bool getNAND();
    virtual bool getNOT();
    virtual bool getINPUT();
    virtual node* getLeft();
    virtual node* getRight();
    virtual bool getOutput();
    virtual int getCost();
    virtual bool next_is_empty();
    virtual void print_node();
};


bool node::getNAND() {
    return false;
}

node* node::getLeft() {
    return NULL;
}

node* node::getRight() {
    return NULL;
}

bool node::getOutput() {
    return false;
}

int node::getCost() {
    return 0;
}

bool node::getNOT() {
    return false;
}

bool node::getINPUT() {
    return false;
}

bool node::next_is_empty() {
    std::cout << "working with abstract class debug" << std::endl;
    return false;
}

void node::print_node() {
    std::cout << "this is the base class node... no information" << std::endl;
}




//_____________________________________________________________________
//NAND

struct NAND : public node {

    bool isInput = false;
    bool isNOT = false;
    bool isNAND = true;
    int cost = 3;
    node* left{};
    node* right{};
    void print_node() override;
    bool next_is_empty() override;
    bool getNAND() override;
    bool getNOT() override;
    bool getINPUT() override;
    node* getLeft() override;
    node* getRight() override;
    bool getOutput() override;
    int getCost() override;
    NAND(node* parent, node* left, node* right);
};

NAND::NAND(node* parent, node* left, node* right) {


    this->parent = parent;
    if ((left->getINPUT() || left->getNOT()) && right->getNAND()) {
        this->left = right;
        this->right = left;
    }
    else {
        this->left = left;
        this->right = right;
    }
    this->isNAND = true;
    this->isNOT = false;
    output = !(left->output && right->output);

}

node* NAND::getLeft() {
    return this->left;
}

node* NAND::getRight() {
    return this->right;
}

int NAND::getCost() {
    return 3;
}

bool NAND::getOutput() {
    return this->output;
}

bool NAND::getNAND() {
    return true;
}

bool NAND::getNOT() {
    return false;
}

bool  NAND::getINPUT() {
    return false;
}

bool NAND::next_is_empty() {
    return left->isInput && right->isInput;
}

void NAND::print_node() {
    std::cout << "NAND_COMPONENT" << std::endl;
    std::cout << "A:" << this->left->output << " B:" << this->right->output << std::endl;
    std::cout << "OUTPUT IS" << std::endl;
    std::cout << "A NAND B = " << this->output << std::endl;
    std::cout << std::endl;

}


//_______________________________________________________________________
//NOT
struct NOT : public node {
    int cost = 2;



    bool getINPUT() override;
    bool getNAND() override;
    bool getNOT() override;
    bool next_is_empty() override;
    void print_node() override;
    node* getLeft() override;
    node* getRight() override;
    bool getOutput() override;
    int getCost() override;
    NOT(node* parent, node* child);
};

NOT::NOT(node* parent, node* child) {
    this->isInput = false;
    this->isNOT = true;
    this->isNAND = false;
    this->parent = parent;
    this->left = child;
    this->right = NULL;

    output = !(child->output);
}

int NOT::getCost() {
    return 2;
}

bool NOT::getOutput() {
    return this->output;
}
node* NOT::getRight() {
    return NULL;
}

node* NOT::getLeft() {
    return this->left;
}


bool NOT::next_is_empty() {
    return left->isInput;
}

bool NOT::getINPUT() {
    return false;
}

bool NOT::getNOT() {
    return true;
}

bool NOT::getNAND() {
    return false;
}

void NOT::print_node() {
    std::cout << "NOT-COMPONENT" << std::endl;
    std::cout << "INPUT IS" << std::endl;
    std::cout << "A:" << this->left->output << std::endl;
    std::cout << "OUTPUT IS" << std::endl;
    std::cout << "NOT A = " << this->output << std::endl;
    std::cout << std::endl;
}

//_________________
//INPUT

struct INPUT : public node {
    bool isInput = true;
    INPUT(node* parent, bool value);
    void print_node() override;
    bool getINPUT() override;
    bool getNAND() override;
    bool getNOT() override;
    node* getLeft() override;
    node* getRight() override;
    bool getOutput() override;
    int getCost() override;
};

INPUT::INPUT(node* parent, bool value) {
    this->left = NULL;
    this->right = NULL;
    this->parent = parent;
    this->output = value;
}


node* INPUT::getLeft() {
    return NULL;
}

node* INPUT::getRight() {
    return NULL;
}

bool INPUT::getOutput() {
    return this->output;
}

int INPUT::getCost() {
    return 0;
}

void INPUT::print_node() {
    std::cout << "THIS IS AN INPUT VARIABLE" << std::endl;
    std::cout << "Current boolean value is: " << this->output << std::endl;
    std::cout << std::endl;
}

bool INPUT::getINPUT() {
    return true;
}

bool INPUT::getNOT() {
    return false;
}

bool INPUT::getNAND() {
    return false;
}
//INPUT END
//Operations



node* AND(node* a, node* b) {
    NAND* child = new NAND(NULL, a, b);
    NOT* parent = new NOT(NULL, child);
    child->parent = parent;
    return parent;
}

node* OR(node* a, node* b) {
    NOT* child_1 = new NOT(NULL, a);
    NOT* child_2 = new NOT(NULL, b);
    NAND* parent = new NAND(NULL, child_1, child_2);
    child_1->parent;
    child_2->parent;
    return parent;
}
//should use pointers
template <class T>
bool Is_In_Queue(Queue<T> Q, T item) {
    bool Is_In = false;
    if (Q.isEmpty()) {
        return false;
    }
    else {
        for (int i = 0; i < Q.size; i++) {
            if (Q.arr[i] == item)
                Is_In = true;
        }

        return Is_In;
    }
}


// 0 Casting Spells Le-Epic Polymorphism

Queue<node*> DFS_Visited(node* root) {
    Queue<node*> Search_Party = Queue<node*>();
    Queue<node*> The_Visited = Queue<node*>();
    Search_Party.enqueue(root);
    The_Visited.enqueue(root);
    node* tmp;

    tmp = root->getLeft();

    while (!Search_Party.isEmpty()) {
        //check if already mapped out and geedout
        if (tmp != NULL && !Is_In_Queue(The_Visited, tmp)) {
            Search_Party.enqueue(tmp);
            The_Visited.enqueue(tmp);
        }

        tmp = Search_Party.pop()->getRight();

        if (tmp != NULL && !Is_In_Queue(The_Visited, tmp)) {
            Search_Party.enqueue(tmp);
            The_Visited.enqueue(tmp);
        }
        tmp = Search_Party.peek();
        if (tmp == NULL) {
            continue;
        }
        else {
            tmp = tmp->getLeft();
        }


    }

    return The_Visited;



}

int return_min(Queue<int> BB) {
    int min = BB.peek();
    for (int i = 0; i < BB.size; i++) {
        if (min > BB.arr[i] && BB.arr[i] != 0) {
            min = BB.arr[i];
        }

    }

    return min;
}


struct OutBox {
    int cost;
    std::string bintree;

    OutBox() {
        this->cost = NULL;
        bintree = "";
    }
    OutBox(int LeBron, std::string KOBE) {
        this->cost = LeBron;
        this->bintree = KOBE;
    }
    void PrintBox() {
        std::cout << "MIN COST" << std::endl;
        std::cout << this->cost << std::endl;
        std::cout << "BIN TREE IS" << std::endl;
    }
};

OutBox min_cost_box(node* root) {

    Queue<OutBox> Quavo = Queue<OutBox>();

    if (root == NULL) {
        OutBox O = OutBox(0, "INPUT");
        return O;
    }

    if (root->getINPUT()) {
        OutBox O = OutBox(0, "INPUT");
        return O;
    }

    if (root->getRight() == NULL) {

        //NOR2
        if (root->getNOT() && root->getLeft()->getNAND() && root->getLeft()->getLeft()->getNOT() &&
            root->getLeft()->getRight()->getNOT()) {
            Quavo.enqueue(OutBox(
                6
                + min_cost_box(root->getLeft()->getLeft()->getLeft()).cost
                + min_cost_box(root->getLeft()->getRight()->getLeft()).cost
                , "NOR2" + min_cost_box(root->getLeft()->getLeft()->getLeft()).bintree
                + min_cost_box(root->getLeft()->getRight()->getLeft()).bintree));

        }

        //NOT

        if (root->getNOT() && root->getLeft() == NULL) {
            OutBox O = OutBox(2, "NOT1");
            return O;
        }

        if (root->getNOT()) {
            Quavo.enqueue(OutBox(2 + min_cost_box(root->getLeft()).cost,
                "NOT1" + min_cost_box(root->getLeft()).bintree));
        }

        //AND2

        if (root->getNOT() && root->getLeft()->getNAND()) {
            Quavo.enqueue(OutBox(4 + min_cost_box(root->getLeft()->getLeft()).cost
                + min_cost_box(root->getLeft()->getRight()).cost, "AND2"
                + min_cost_box(root->getLeft()->getLeft()).bintree
                + min_cost_box(root->getLeft()->getRight()).bintree));
        }


        //AOI21
        if (root->getNOT() && root->getLeft()->getNAND() && root->getLeft()->getLeft()->getNAND() &&
            root->getLeft()->getRight()->getNOT()) {
            Quavo.enqueue(OutBox(7 + min_cost_box(root->getLeft()->getLeft()->getLeft()).cost
                + min_cost_box(root->getLeft()->getLeft()->getRight()).cost
                + min_cost_box(root->getLeft()->getRight()->getLeft()).cost,
                "A0I21" + min_cost_box(root->getLeft()->getLeft()->getLeft()).bintree
                + min_cost_box(root->getLeft()->getLeft()->getRight()).bintree
                + min_cost_box(root->getLeft()->getRight()->getLeft()).bintree));
        }

        //A0I22

        if (root->getNOT() && root->getLeft()->getNAND() && root->getLeft()->getLeft()->getNAND() &&
            root->getLeft()->getRight()->getNAND()) {
            Quavo.enqueue(OutBox(7 +
                min_cost_box(root->getLeft()->getLeft()->getLeft()).cost +
                min_cost_box(root->getLeft()->getLeft()->getRight()).cost +
                min_cost_box(root->getLeft()->getRight()->getLeft()).cost +
                min_cost_box(root->getLeft()->getRight()->getLeft()).cost,
                "A0I22"
                + min_cost_box(root->getLeft()->getLeft()->getLeft()).bintree
                + min_cost_box(root->getLeft()->getLeft()->getRight()).bintree
                + min_cost_box(root->getLeft()->getRight()->getLeft()).bintree
                + min_cost_box(root->getLeft()->getRight()->getLeft()).bintree
            ));


        }


    }
    else {
        //OR2
        if (root->getNAND() && root->getLeft()->getNOT() && root->getRight()->getNOT()) {
            Quavo.enqueue(OutBox(4
                + min_cost_box(root->getLeft()->getLeft()).cost
                + min_cost_box(root->getRight()->getLeft()).cost,
                "OR2"
                + min_cost_box(root->getLeft()->getLeft()).bintree
                + min_cost_box(root->getRight()->getLeft()).bintree));
        }



        //NAND
        if (root->getNAND()) {
            Quavo.enqueue(OutBox(3 + min_cost_box(root->getLeft()).cost + min_cost_box(root->getRight()).cost,
                "NAND2"
                + min_cost_box(root->getLeft()).bintree
                + min_cost_box(root->getRight()).bintree));
        }


    }

    int min = Quavo.arr[0].cost;
    int j = 0;
    for (int i = 0; i < Quavo.size; i++) {
        if (min > Quavo.arr[i].cost) {
            min = Quavo.arr[i].cost;
            j = i;
        }

    }

    return Quavo.arr[j];


}




int min_cost(node* root) {
    Queue<int> Quavo = Queue<int>();


    if (root == NULL) {

        return 0;
    }
    //INPUT
    if (root->getINPUT()) {

        return 0;
    }

    if (root->getRight() == NULL) {
        //NOT
        if (root->getNOT() && root->getLeft() == NULL) {

            return 2;
        }

        if (root->getNOT()) {
            Quavo.enqueue(2 + min_cost(root->getLeft()));
        }

        //AND2
        if (root->getNOT() && root->getLeft()->getNAND()) {
            Quavo.enqueue(4 + min_cost(root->getLeft()->getLeft()) + min_cost(root->getLeft()->getRight()));
        }
        //NOR2
        if (root->getNOT() && root->getLeft()->getNAND() && root->getLeft()->getLeft()->getNOT() &&
            root->getLeft()->getRight()->getNOT()) {
            Quavo.enqueue(6 + min_cost(root->getLeft()->getLeft()) + min_cost(root->getLeft()->getRight()));
        }

        //AOI21
        if (root->getNOT() && root->getLeft()->getNAND() && root->getLeft()->getLeft()->getNAND() &&
            root->getLeft()->getRight()->getNOT()) {
            std::cout << "AO121 CALLED" << std::endl;
            Quavo.enqueue(7 + min_cost(root->getLeft()->getLeft()->getLeft()) +
                min_cost(root->getLeft()->getLeft()->getRight())
                + min_cost(root->getLeft()->getRight()->getLeft()));
        }

        //A0I22

        if (root->getNOT() && root->getLeft()->getNAND() && root->getLeft()->getLeft()->getNAND() &&
            root->getLeft()->getRight()->getNAND()) {
            Quavo.enqueue(7 +
                min_cost(root->getLeft()->getLeft()->getLeft()) +
                min_cost(root->getLeft()->getLeft()->getRight()) +
                min_cost(root->getLeft()->getRight()->getLeft()) +
                min_cost(root->getLeft()->getRight()->getLeft())
            );


        }


    }
    else {
        //OR2
        if (root->getNAND() && root->getLeft()->getNOT() && root->getRight()->getNOT()) {
            Quavo.enqueue(4 + min_cost(root->getLeft()->getLeft()) + min_cost(root->getRight()->getLeft()));
        }



        //NAND
        if (root->getNAND()) {
            Quavo.enqueue(3 + min_cost(root->getLeft()) + min_cost(root->getRight()));
        }

    }
    for (int i = 0; i < Quavo.size; i++) {
        std::cout << Quavo.arr[i] << " ";
    }


    std::cout << std::endl;
    std::cout << "MIN IN THIS LEVEL";
    std::cout << return_min(Quavo) << std::endl;
    return return_min(Quavo);
}


std::string string_decomposed_tree(node* root) {
    Queue<node*> Visited = DFS_Visited(root);
    std::string out = "";
    //True if NOT
    //False if NAND
    for (int i = 0; i < Visited.size; i++) {
        if (Visited.arr[i]->getNOT())
            out += "2";
        else if (Visited.arr[i]->getNAND()) {
            out += "3";
        }
        else {
            out += "0";
        }
    }
    return out;
}


Queue<std::string> RecursiveDecomposedTrees(node* root) {
    Queue<node*> Visited = DFS_Visited(root);
    Queue<std::string> output = Queue<std::string >();
    while (!Visited.isEmpty()) {
        output.enqueue(string_decomposed_tree(Visited.pop()));
    }

    return output;
}










// THE READING PROCESS
//1130/23
int Queue_index_of(Queue<std::string> P, std::string& Q) {
    for (int i = 0; i < P.size; i++) {
        if (P.arr[i] == Q) {
            return i;
        }
    }

    return -1;
}

std::string Remove_WhiteSpace(const std::string& D) {
    std::string OUT = "";
    for (int i = 0; i < D.length(); i++) {
        if (D.substr(i, 1) != " ") {
            OUT += D.substr(i, 1);
        }
    }
    return OUT;
}
//<name,operation,var1,var2>
Queue<std::string> Process_Equation(const std::string& E) {

    std::string MOD = Remove_WhiteSpace(E);
    int spot_of_incidence;
    Queue<std::string> OUT = Queue<std::string>();
    //Remove Equals Sign
    for (int i = 0; i < MOD.size(); i++) {
        if (MOD.substr(i, 1) == "=") {
            spot_of_incidence = i;
        }
    }

    if (MOD.substr(0, spot_of_incidence).find("t", std::string::npos)) {
        OUT.enqueue(MOD.substr(0, spot_of_incidence));
    }
    else {
        OUT.enqueue(MOD.substr(0, 1));
    }

    MOD = MOD.substr(spot_of_incidence + 1);

    if (MOD.substr(0, 1) == "A") {
        OUT.enqueue("AND");
        MOD = MOD.substr(3);
    }
    else if (MOD.substr(0, 1) == "O") {
        OUT.enqueue("OR");
        MOD = MOD.substr(2);
    }
    else {
        OUT.enqueue("NOT");
        MOD = MOD.substr(3);
    }

    int ascii_value;
    unsigned char x = MOD[0];
    ascii_value = static_cast<int>(x);
    if ((ascii_value > 96 && ascii_value < 116) || (ascii_value > 116 && ascii_value < 122)) {
        OUT.enqueue(MOD.substr(0, 1));
        MOD = MOD.substr(1);
    }
    else {
        OUT.enqueue(MOD.substr(0, 2));
        MOD = MOD.substr(2);
    }
    OUT.enqueue(MOD);

    return OUT;


}



Queue<std::string> Process_Equation_Clone(const std::string& E) {

    std::string MOD = Remove_WhiteSpace(E);
    int spot_of_incidence;
    Queue<std::string> OUT = Queue<std::string>();
    //Remove Equals Sign
    for (int i = 0; i < MOD.size(); i++) {
        if (MOD.substr(i, 1) == "=") {
            spot_of_incidence = i;
            break;
        }
    }

    if (MOD.substr(0, spot_of_incidence).find("t", std::string::npos)) {
        OUT.enqueue(MOD.substr(0, spot_of_incidence));
    }
    else {
        OUT.enqueue(MOD.substr(0, 1));
    }

    MOD = MOD.substr(spot_of_incidence + 1);
    while (!MOD.empty()) {
        if (MOD.substr(0, 1) == "A") {
            OUT.enqueue("AND");
            MOD = MOD.substr(3);
        }
        else if (MOD.substr(0, 1) == "O") {
            OUT.enqueue("OR");
            MOD = MOD.substr(2);
        }
        else if (MOD.substr(0, 1) == "N") {
            OUT.enqueue("NOT");
            MOD = MOD.substr(3);
        }


        int ascii_value;
        unsigned char x = MOD[0];
        ascii_value = static_cast<int>(x);
        if ((ascii_value > 96 && ascii_value < 116) || (ascii_value > 116 && ascii_value < 122)) {
            OUT.enqueue(MOD.substr(0, 1));
            MOD = MOD.substr(1);
        }
        else if (MOD.substr(0, 1) == "t") {
            OUT.enqueue(MOD.substr(0, 2));
            MOD = MOD.substr(2);
        }
    }
    return OUT;


}






void Print_String_Queue(Queue<std::string> A) {
    std::cout << "[-BEGINNING->";
    for (int i = 0; i < A.size; i++) {
        std::cout << A.arr[i] << ",";
    }
    std::cout << "<---END-----]";
    std::cout << std::endl;
}

void Print_String_Queue_of_Queues(Queue<Queue<std::string>> Q) {
    for (int i = 0; i < Q.size; i++) {
        for (int j = 0; j < Q.arr[i].size; j++) {
            std::cout << Q.arr[i].arr[j] << ",";
        }
        std::cout << std::endl;
    }
}



int read_inputs(std::ifstream& _file) {
    std::string line;
    int out = 0;
    if (!_file.is_open()) {
        std::cout << "file problems" << std::endl;
        return 0;
    }
    while (std::getline(_file, line)) {
        // Process the line or print it

        // Check if the line contains the phrase "Output"
        if (line.find("OUTPUT") != std::string::npos) {
            std::cout << "Found the phrase 'Output'. Stopping reading lines." << std::endl;
            break;
        }
        else {
            out += 1;
        }

    }
    _file.close();
    return out;


}


Queue<bool> create_Inputs(int length) {
    Queue<bool> out;
    std::cout << "Write out " << length << " boolean inputs in the form 111000011010" << std::endl;
    std::string line;
    std::getline(std::cin, line);
    int tmp;
    for (int i = 0; i < length; i++) {
        if (line.substr(i, 1) == "0") {
            out.enqueue(false);
        }
        else {
            out.enqueue(true);
        }


    }

    return out;


}
int ascii_to_index(char A) {
    return static_cast<int> (A) - 97;
}

int t_index_extraction(std::string c, int inputs) {
    return (inputs - 1) + std::stoi(c.substr(1));
}

int index_extractions(std::string S, int inputs) {
    if (S.length() < 2) {
        return ascii_to_index(S[0]);
    }
    else {
        return t_index_extraction(S, inputs);
    }
}


node* NOT1(node* a) {
    NOT* parent = new NOT(NULL, a);
    a->parent = parent;
    return parent;
}

Queue<node*> create_Sub_Trees(Queue<Queue<std::string>>orders, int inputs) {
    Queue<node*> selection = Queue<node*>();

    for (int i = 0; i < inputs; i++) {
        selection.enqueue(new INPUT(NULL, true));
    }


    //orders

    node* tmp = NULL;
    for (int i = 0; i < orders.size; i++) {
        //WHICH OPERATION
        if (orders.arr[i].arr[1] == "OR") {
            tmp = OR(selection.arr[index_extractions(orders.arr[i].arr[2], inputs)],
                selection.arr[index_extractions(orders.arr[i].arr[3], inputs)]);
        }
        else if (orders.arr[i].arr[1] == "AND2") {
            tmp = AND(selection.arr[index_extractions(orders.arr[i].arr[2], inputs)],
                selection.arr[index_extractions(orders.arr[i].arr[3], inputs)]);
        }
        else if (orders.arr[i].arr[1] == "NOT1")
        {
            tmp = NOT1(selection.arr[index_extractions(orders.arr[i].arr[2], inputs)]);

        }
        selection.enqueue(tmp);
        tmp = NULL;
    }

    return selection;
}




Queue<node*> create_Sub_Trees_clone(Queue<Queue<std::string>>orders, int inputs) {

    Queue<node*> selection = Queue<node*>();
    for (int i = 0; i < inputs; i++) {
        selection.enqueue(new INPUT(NULL, true));
    }


    //orders

    node* tmp;

    int index_1 = 0;
    int index_2 = 0;
    int j = 1;
    Queue<node*> PostFix = Queue<node*>();
    for (int i = 0; i < orders.size; i++) {
        //for every equation
        while (j < orders.arr[i].size) {
            //Last element up to then
            std::string tb_evaled = orders.arr[i].arr[orders.arr[i].size - j];
            //orders.arr[i] = "F , OR , t1 , and , t2 , t3"
            //orders.arr[i] = "F, NOT , AND , a , OR , b , c
            //If it a input
            if (tb_evaled.size() < 3 && tb_evaled != "OR") {
                index_2 = index_extractions(tb_evaled, inputs);
                PostFix.enqueue(selection.arr[index_2]);
            }
            else if (tb_evaled == "OR") {
                PostFix.enqueue(OR(PostFix.pop_stack(), PostFix.pop_stack()));
            }
            else if (tb_evaled == "AND") {
                PostFix.enqueue(AND(PostFix.pop_stack(), PostFix.pop_stack()));
            }
            else if (tb_evaled == "NOT") {
                PostFix.enqueue(NOT1(PostFix.pop_stack()));
            }
            j++;

        }
        tmp = PostFix.pop();
        selection.enqueue(tmp);
        j = 1;
    }
    return selection;
}


Queue<node*> read_inputs_full(std::ifstream& _file) {
    std::string line;
    int out = 0;
    if (!_file.is_open()) {
        std::cout << "file problems" << std::endl;
        return {};
    }
    while (std::getline(_file, line)) {
        // Process the line or print it

        if (line == "") {
            break;
        }
        if (line.find("OUTPUT") != std::string::npos) {
            std::cout << "Found the phrase 'Output'. Stopping reading lines." << std::endl;
            break;
        }
        else {


            out++;
        }

    }
    //assign inputs to ascii characters
    //create default input nodes and queue up

    Queue<Queue<std::string>> equation_details = Queue<Queue<std::string>>();
    //ALL EQUATION INFROMATION
    int i = 0;
    while (std::getline(_file, line)) {
        equation_details.enqueue(Process_Equation_Clone(line));
    }

    return create_Sub_Trees_clone(equation_details, out);


    _file.close();

}





//END OF THE READING PROCESS




//CONVERSION ATTEMPTS
//CONVERSION ENDS

//IN CONSOLE 2 REPRESENTS NOT AND 3 REPRESENTS AND

Queue<std::string> ProcessBinaryTreeIntoQueue(const std::string& A) {
    std::string MOD = A;
    Queue<std::string > B = Queue<std::string>();

    std::string alphabet = "abcdefghijklmnopqrstuvwxyz";
    int input_counter = 0;
    while (!MOD.empty()) {
        if (MOD.substr(0, 3) == "OR2") {
            B.enqueue(MOD.substr(0, 3));
            MOD = MOD.substr(3);
        }
        else if (MOD.substr(0, 4) == "AND2") {
            B.enqueue(MOD.substr(0, 4));
            MOD = MOD.substr(4);
        }
        else if (MOD.substr(0, 4) == "NOR2") {
            B.enqueue(MOD.substr(0, 4));
            MOD = MOD.substr(4);
        }
        else if (MOD.substr(0, 4) == "NOT1") {
            B.enqueue(MOD.substr(0, 4));
            MOD = MOD.substr(4);
        }
        else if (MOD.substr(0, 5) == "NAND2") {
            B.enqueue(MOD.substr(0, 5));
            MOD = MOD.substr(5);
        }
        else if (MOD.substr(0, 5) == "AOI21") {
            B.enqueue(MOD.substr(0, 5));
            MOD = MOD.substr(5);
        }
        else if (MOD.substr(0, 5) == "AOI22") {
            B.enqueue(MOD.substr(0, 5));
            MOD = MOD.substr(5);
        }
        else if (MOD.substr(0, 5) == "INPUT") {
            B.enqueue(alphabet.substr(0, 1));
            alphabet = alphabet.substr(1);
            MOD = MOD.substr(5);
        }

    }


    return B;

}


void Print_Out_Netlist(Queue<std::string> JordanPoole) {
    Queue<std::string> Postfix = Queue<std::string>();
    int len = JordanPoole.size;
    int i = 0;
    while (JordanPoole.size > 1) {

        if (JordanPoole.peek_stack().size() == 1) {
            Postfix.enqueue(JordanPoole.pop_stack());

        }
        else if (JordanPoole.peek_stack() == "NOT1") {
            i++;
            std::cout << "t" << i << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << std::endl;
            Postfix.enqueue("t" + std::to_string(i));
        }
        else if (JordanPoole.peek_stack() == "AND2") {
            i++;
            std::cout << "t" << i << " = " << JordanPoole.pop_stack() << " " <<
                Postfix.pop_stack() << " " << Postfix.pop_stack() << " " << std::endl;
            Postfix.enqueue("t" + std::to_string(i));
        }
        else if (JordanPoole.peek_stack() == "AOI21") {
            i++;
            std::cout << "t" << i << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " "
                << Postfix.pop_stack() << " " <<
                Postfix.pop_stack() << std::endl;
            Postfix.enqueue("t" + std::to_string(i));
        }
        else if (JordanPoole.peek_stack() == "A0I22") {
            i++;
            std::cout << "t" << i << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " " <<
                Postfix.pop_stack() << " " <<
                Postfix.pop_stack() << " " <<
                Postfix.pop_stack() << " " <<
                std::endl;
            Postfix.enqueue("t" + std::to_string(i));
        }
        else if (JordanPoole.peek_stack() == "NOR2") {
            i++;
            std::cout << "t" << i << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " " << Postfix.pop_stack() << std::endl;
            Postfix.enqueue("t" + std::to_string(i));
        }
        else if (JordanPoole.peek_stack() == "NAND2") {
            i++;
            std::cout << "t" << i << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " " << Postfix.pop_stack() << std::endl;
            Postfix.enqueue("t" + std::to_string(i));
        }
        else if (JordanPoole.peek_stack() == "OR2") {
            i++;
            std::cout << "t" << i << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " " << Postfix.pop_stack() << std::endl;
            Postfix.enqueue("t" + std::to_string(i));
        }

    }


    if (JordanPoole.peek_stack().size() == 1) {
        Postfix.enqueue(JordanPoole.pop());
    }
    else if (JordanPoole.peek_stack() == "NOT1") {
        i++;
        std::cout << "P" << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << std::endl;
        Postfix.enqueue("t" + std::to_string(i));
    }
    else if (JordanPoole.peek_stack() == "AND2") {
        i++;
        std::cout << "P" << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " " << Postfix.pop_stack() << " " << std::endl;
        Postfix.enqueue("t" + std::to_string(i));
    }
    else if (JordanPoole.peek_stack() == "AOI21") {
        i++;
        std::cout << "P" << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack()
            << " " << Postfix.pop_stack() << " " <<
            Postfix.pop_stack() << std::endl;
        Postfix.enqueue("t" + std::to_string(i));
    }
    else if (JordanPoole.peek_stack() == "A0I22") {
        i++;
        std::cout << "P" << " = " << JordanPoole.pop_stack() << Postfix.pop_stack() << " " <<
            Postfix.pop_stack() << " " <<
            Postfix.pop_stack() << " " <<
            Postfix.pop_stack() << " " <<
            std::endl;
        Postfix.enqueue("t" + std::to_string(i));
    }
    else if (JordanPoole.peek_stack() == "NOR2") {
        i++;
        std::cout << "P" << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " " <<
            Postfix.pop_stack() << std::endl;
        Postfix.enqueue("t" + std::to_string(i));
    }
    else if (JordanPoole.peek_stack() == "NAND2") {
        i++;
        std::cout << "P" << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " " << Postfix.pop_stack() << std::endl;
        Postfix.enqueue("t" + std::to_string(i));
    }
    else if (JordanPoole.peek_stack() == "OR2") {
        i++;
        std::cout << "P" << " = " << JordanPoole.pop_stack() << " " << Postfix.pop_stack() << " " << Postfix.pop_stack() << std::endl;
        Postfix.enqueue("t" + std::to_string(i));
    }




}


void read_inputs_to_the_full(std::ifstream& _file) {
    std::string line;
    int out = 0;
    int in = 0;
    if (!_file.is_open()) {
        std::cout << "file problems" << std::endl;
        return;
    }
    while (std::getline(_file, line)) {
        // Process the line or print it

        if (line.find("OUTPUT") != std::string::npos) {
            in++;
            while (std::getline(_file, line) && line.find("OUTPUT") != std::string::npos) {

                in++;
            }
            break;
        }

        else {


            out++;
        }

    }
    //assign inputs to ascii characters
    //create default input nodes and queue up
    Queue<Queue<std::string>> equation_details = Queue<Queue<std::string>>();
    equation_details.enqueue(Process_Equation_Clone(line));
    //ALL EQUATION INFROMATION
    while (std::getline(_file, line)) {
        equation_details.enqueue(Process_Equation_Clone(line));
    }

    Queue<node*> L = create_Sub_Trees_clone(equation_details, out);


    for (int i = 0; i < in; i++) {
        std::cout << "Input " << i + 1 << ":" << std::endl;
        std::cout << "Minimum cost: ";
        std::cout << min_cost_box(L.peek_stack()).cost << std::endl;
        Print_Out_Netlist(ProcessBinaryTreeIntoQueue(min_cost_box(L.peek_stack()).bintree));

        L.pop_stack();
    }


    _file.close();

}



int main() {

    bool run = true;
    std::string filename;
    std::string condition;
    while (run) {
        std::cout << "Hello, World!" << std::endl;
        std::cout << "Welcome to the Technology Mapping Program:" << std::endl;
        std::cout << "What file would you like to read today????" << std::endl;
        std::cout << "File name: ";

        std::cin >> filename;
        std::ifstream _file(filename);
        read_inputs_to_the_full(_file);
        std::cout << " enter X to exit or write E to enter another file" << std::endl;
        std::cin >> condition;
        if (condition == "X") {
            run = false;
        }
    }
    return 0;
}
